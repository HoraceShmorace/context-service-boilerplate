var async = require('async'),
	atob = require('atob'),
	ObjectId = require('mongoose').Types.ObjectId,
	Config = require('./config/configure'),
	UrlModule = require('./modules/url.js')(Config),
	ContextModel = require('./models/context.js')(),
	OrgModel = require('./models/org')(),
	_formatOutput = function(document, startTime) {
		var output = {};
		if (document.isError) {
			output.isError = document.isError;
			output.message = document.message;
		} else {
			output.id = document._id;
			output.url = document.url;
			output.canonical = document.canonical;
			output.matches = document.matches;
			output.sources = document.sources;
			output.dateCreate = document.dateCreated;
		}
		output.timeForRequest = (Date.now() - startTime) + 'ms';
		return JSON.stringify(output, null, '\t');
	};

module.exports = function(req, res) {

	var startTime = Date.now(),
		orgId = req.params.org,
		url = req.query.u || req.query.url,
		output;

	res.setHeader("Access-Control-Allow-Origin", "*");
	res.setHeader("Access-Control-Allow-Headers", "X-Forwarded-For,X-Requested-With,Authorization,Content-Type");
	res.setHeader("Access-Control-Allow-Methods", "*");
	res.setHeader("Content-Type", "application/json");

	if (!url) {
		res.end('Please provide a URL via either the u or url querystring parameter.');
		return;
	}

	console.log('Starting for url:', url + '...');
	async.waterfall(
		[
			function(contextWorkflowNext) {
				OrgModel.findOne({
					id: orgId
				}, {
					"domains": 1,
					"dictionaries": 1
				}, contextWorkflowNext);
				return;
			},
			function(org, contextWorkflowNext) {
				if (!org) {
					contextWorkflowNext("Invalid organization ID: " + orgId);
				} else {
					var compiledKeywords = org.dictionaries.reduce(function(prev, current, index) {
						return prev.concat(current.versions[0].content);
					}, []);
					contextWorkflowNext(null, {
						domains: org.domains,
						compiledKeywords: compiledKeywords.join(',')
					});
				}
				return;
			}
		],
		function(err, orgData) {
			if (err) {
				console.log(err);
				res.end(_formatOutput({
					isError: true,
					message: err
				}, startTime));
				return;
			}
			ContextModel.findOne({
				url: url
			}, function(err, contextDocument) {
				if (err) {
					console.log(err);
					res.end(_formatOutput({
						isError: true,
						message: err
					}, startTime));
				} else if (!contextDocument) {
					/* THIS PREVENTS THE SYSTEM FROM WAITING FOR THE SCRAPE.
					res.end(_formatOutput({
						isError: true,
						message: "This url is not in our DB. We'll fetch it now."
					},startTime));
					*/
					UrlModule.scrape(orgData.compiledKeywords, url, function(err, result) {
						var output;
						if (err) {
							output = err;
						} else {
							var newContext = new ContextModel(result);
							newContext.save(function(err, saveResult) {
								if (err) console.log("Could not save new context:", err);
							});
							console.log('Context saved for', url);
							output = _formatOutput(newContext, startTime);
						}
						res.end(output);
					});
				} else {
					console.log('Context found for', url);
					output = _formatOutput(contextDocument, startTime);
					res.end(output);
				}
				return;
			});
		}
	)
};
